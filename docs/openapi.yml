openapi: 3.1.0
info:
  title: Autoatendimento Fast Food
  version: 1.0.0
  description: Sistema de Autoatendimento para Fast Food

servers:
  - url: http://localhost:3333
    description: Servidor


paths:
  /customers:
    get:
      summary: Lista todos os clientes
      tags:
        - Clientes
      responses:
        '200':
          description: Array com todos os clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerSchema'
              examples:
                Success:
                  $ref: '#/components/examples/CustomersArrayExample'
        '500':
          $ref: '#/components/responses/Error500'

    post:
      summary: Cria novo cliente
      tags:
        - Clientes
      requestBody:
        description: Dados do novo cliente
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomerSchema'
            examples:
              Success:
                $ref: '#/components/examples/NewCustomerExample'
      responses:
        '201':
          description: Cliente criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSchema'
              examples:
                Success:
                  $ref: '#/components/examples/CustomerExample'
        '400':
          $ref: '#/components/responses/Error400'
        '404':
          $ref: '#/components/responses/Error404'

  /customers/cpf/{cpf}:
    get:
      summary: Busca clientes por CPF
      tags:
        - Clientes
      parameters:
        - $ref: '#/components/parameters/cpf'
      responses:
        '200':
          description: Busca clientes por CPF
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSchema'
              examples:
                Success:
                  $ref: '#/components/examples/CustomerExample'
        '404':
          $ref: '#/components/responses/Error404'

  /products:
    get:
      summary: Lista todos os produtos
      tags:
        - Produtos
      parameters:
        - $ref: '#/components/parameters/category'
      responses:
        '200':
          description: Array com todos os produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductSchema'
              examples:
                Success:
                  $ref: '#/components/examples/ProductsArrayExample'
        '500':
          $ref: '#/components/responses/Error500'

    post:
      summary: Cria novo produto
      tags:
        - Produtos
      requestBody:
        description: Dados do novo produto
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProductSchema'
            examples:
              Success:
                $ref: '#/components/examples/NewProductExample'
      responses:
        '201':
          description: Produto criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSchema'
              examples:
                Success:
                  $ref: '#/components/examples/ProductExample'
        '400':
          $ref: '#/components/responses/Error400'

  /products/{id}:
    get:
      summary: Busca produto por ID
      tags:
        - Produtos
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Busca produto por ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSchema'
              examples:
                Success:
                  $ref: '#/components/examples/ProductExample'
        '404':
          $ref: '#/components/responses/Error404'

    put:
      summary: Atualiza produto por ID
      tags:
        - Produtos
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Produto alterado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewProductSchema'
              examples:
                Success:
                  $ref: '#/components/examples/ProductExample'
        '404':
          $ref: '#/components/responses/Error404'

    delete:
      summary: Apaga produto por ID
      tags:
        - Produtos
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Produto apagado com sucesso
        '404':
          $ref: '#/components/responses/Error404'

  /orders:
    get:
      summary: Lista todos os pedidos
      tags:
        - Pedidos
      responses:
        '200':
          description: Lista com todos os pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderSchema'
              examples:
                Success:
                  $ref: '#/components/examples/OrderArrayExample'
        '500':
          $ref: '#/components/responses/Error500'

    post:
      summary: Cria novo pedido
      tags:
        - Pedidos
      requestBody:
        description: Dados do novo pedido
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrderSchema'
            examples:
              Success:
                $ref: '#/components/examples/NewOrderExample'
      responses:
        '201':
          description: Cliente criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
              examples:
                Success:
                  $ref: '#/components/examples/OrderExample'
        '400':
          $ref: '#/components/responses/Error400'

  /orders/{id}:
    get:
      summary: Busca pedido por ID
      tags:
        - Pedidos
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Busca pedido por ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
              examples:
                Success:
                  $ref: '#/components/examples/OrderExample'
        '404':
          $ref: '#/components/responses/Error404'

  /orders/number/{orderNumber}:
      get:
        summary: Busca pedido por número
        tags:
          - Pedidos
        parameters:
          - $ref: '#/components/parameters/orderNumber'
        responses:
          '200':
            description: Busca pedido por número
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrderSchema'
                examples:
                  Success:
                    $ref: '#/components/examples/OrderExample'
          '400':
            $ref: '#/components/responses/Error400'
          '404':
            $ref: '#/components/responses/Error404'

  /orders/{id}/status:
    patch:
      summary: Atualiza status do pedido
      tags:
        - Pedidos
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Dados para atualizar status do pedido
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOrderStatusSchema'
            examples:
              Success:
                $ref: '#/components/examples/UpdateOrderStatusExample'
      responses:
        '200':
          description: Status do pedido alterado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
              examples:
                Success:
                  $ref: '#/components/examples/OrderExample'
        '400':
          $ref: '#/components/responses/Error400'

  /webhook/payment/{id}:
    post:
      summary: Atualiza o pagamento do pedido
      tags:
        - webhooks
      requestBody:
        description: Dados do pagamento
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookPaymentSchema'
            examples:
              Success:
                $ref: '#/components/examples/webhookPaymentExample'
      responses:
        '200':
          description: Pedido pago
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
              examples:
                Success:
                  $ref: '#/components/examples/OrderExample'
        '404':
          $ref: '#/components/responses/Error404'

components:
  schemas:
    EnumProductTypes:
      type: string
      enum:
        - snack
        - side
        - drink
        - dessert
      description: Categorias de produtos

    EnumOrderStatus:
      type: string
      enum:
        - received
        - in_preparation
        - ready
        - completed
      description: Status validos de pedidos

    EnumPaymentStatus:
      type: string
      enum:
        - paid
        - expired
        - pending
      description: Status validos de pagamentos

    CustomerSchema:
      type: object
      properties:
        id:
          type: string
        cpf:
          type: string
        name:
          type: string
        email:
          type: string

    NewCustomerSchema:
      type: object
      properties:
        cpf:
          type: string
        name:
          type: string
        email:
          type: string
      required:
        - cpf
        - name
        - email

    ProductSchema:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          $ref: '#/components/schemas/EnumProductTypes'
        price:
          type: number
          description: Preço em centavos
        description:
          type: string
        images:
          type: array
          items:
            type: string
          description: Caso o produto não tenha imagens submeter um array vazio

    NewProductSchema:
      type: object
      properties:
        name:
          type: string
        category:
          $ref: '#/components/schemas/EnumProductTypes'
        price:
          type: number
          description: Preço em centavos
        description:
          type: string
        images:
          type: array
          items:
            type: string
          description: Caso o produto não tenha imagens submeter um array vazio
      required:
        - name
        - category
        - price
        - description
        - images

    OrderSchema:
      type: object
      properties:
        id:
          type: string
        customerId:
          type: string
          description: Identificador do cliente
        orderNumber:
          type: string
          description: Número sequencial do pedido
        total:
          type: number
          description: Valor total do pedido em centavos
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
        status:
          $ref: '#/components/schemas/EnumOrderStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    NewOrderSchema:
      type: object
      properties:
        customerId:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
      required:
        - products

    updateOrderStatusSchema:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnumOrderStatus'
      required:
        - status

    webhookPaymentSchema:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnumPaymentStatus'
      required:
        - status

    ErrorSchema:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  examples:
    CustomerExample:
      summary: Exemplo de cliente
      value:
        id: "1"
        cpf: "12345678901"
        name: João da Silva
        email: jonh_do@email.com

    NewCustomerExample:
      summary: Exemplo de cliente
      value:
        id: "1"
        cpf: "12345678901"
        name: João da Silva
        email: jonh_do@email.com

    CustomersArrayExample:
      summary: Exemplo de lista de clientes
      value:
        - id: "1"
          cpf: "12345678901"
          name: João da Silva
          email: jonhdo@email.com
        - id: "2"
          cpf: "01987654321"
          name: Maria da Silva
          email: marie@email.com

    ProductExample:
      summary: Exemplo de produto
      value:
        id: "1"
        name: Hambúrguer
        category: Lanche
        price: 1500
        description: Hambúrguer de carne
        images: ["http://bucket.com.br/image1.jpg", "http://bucket.com.br/image2.jpg"]

    NewProductExample:
      summary: Exemplo de produto
      value:
        id: "1"
        name: Hambúrguer
        category: Lanche
        price: 1500
        description: Hambúrguer de carne
        images: ["http://bucket.com.br/image1.jpg", "http://bucket.com.br/image2.jpg"]

    ProductsArrayExample:
      summary: Exemplo de lista de produtos
      value:
        - id: "1"
          name: Hambúrguer
          category: Lanche
          price: 1500
          description: Hambúrguer de carne
          images: ["http://bucket.com.br/image1.jpg", "http://bucket.com.br/image2.jpg"]
        - id: "2"
          name: Refrigerante
          category: Bebida
          price: 500
          description: Refrigerante de cola
          images: ["http://bucket.com.br/image3.jpg", "http://bucket.com.br/image4.jpg"]

    OrderExample:
      summary: Exemplo de pedido
      value:
        id: "1"
        customerId: "1"
        totalValue: 2500
        products:
          - productId: "1"
            quantity: 2
          - productId: "2"
            quantity: 1
        orderNumber: "1"
        paymentId: "QR-7D09D7CE02034130A229D1D558EDA5B3-2-1200"

    OrderArrayExample:
      summary: Exemplo de lista de pedidos
      value:
        - id: "1"
          customerId: "1"
          totalValue: 2500
          products:
            - productId: "1"
              quantity: 2
            - productId: "2"
              quantity: 1
          status: Recebido
          orderNumber: "1"
          paymentId: "QR-7D09D7CE02034130A229D1D558EDA5B3-2-1200"
        - id: "2"
          customerId: "2"
          totalValue: 2000
          products:
            - productId: "1"
              quantity: 1
            - productId: "2"
              quantity: 1
          status: Em preparação
          orderNumber: "12"
          paymentId: "QR-7D09D7CE02034130A229D1D558EDA5B3-3-1200"

    NewOrderExample:
      summary: Exemplo de pedido
      value:
        customerId: "1"
        products:
          - productId: "1"
            quantity: 2
          - productId: "2"
            quantity: 1
        status: received
        orderNumber: "12"
        paymentId: "QR-7D09D7CE02034130A229D1D558EDA5B3-3-1200"

    UpdateOrderStatusExample:
      summary: Exemplo de atualização de status
      value:
        status: completed

    webhookPaymentExample:
      summary: Exemplo de atualização de pagamento
      value:
        status: paid

    webhookPaymentResponseExample:
      summary: Exemplo de pagamento atualizado
      value:
        customerId: "1"
        products:
          - productId: "1"
            quantity: 2
          - productId: "2"
            quantity: 1
        status: in_preparation
        orderNumber: "12"
        paymentId: "QR-7D09D7CE02034130A229D1D558EDA5B3-3-1200"

  responses:
    Error400:
      description: Solicitação inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'
          examples:
            erroExemplo:
              summary: Exemplo de erro 400
              value:
                httpCode: INVALID_DATA
                msg: body.name is a required field

    Error404:
      description: Não encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'
          examples:
            erroExemplo:
              summary: Exemplo de erro 404
              value:
                code: NOT_FOUND
                message: Client with CPF 123.456.789-00 not found

    Error500:
      description: Erro interno do servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'
          examples:
            erroExemplo:
              summary: Exemplo de erro interno do servidor
              value:
                message: Internal server error

  parameters:
    cpf:
      name: cpf
      in: path
      required: true
      schema:
        type: string
      description: CPF do cliente

    id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: ID

    orderNumber:
      name: orderNumber
      in: path
      required: true
      schema:
        type: string
      description: Numero sequencial do pedido

    category:
      name: category
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/EnumProductTypes'
      description: Categoria de produtos para buscar
